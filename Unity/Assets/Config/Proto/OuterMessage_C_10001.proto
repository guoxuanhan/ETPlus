syntax = "proto3";
package ET;

message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 MapIndex = 2;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.float3 Forward = 5;
	map<int32, int64> KV = 6;
	MoveInfo MoveInfo = 7;
	string Name = 8;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	repeated Unity.Mathematics.float3 Points = 3;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	Unity.Mathematics.quaternion Rotation = 4;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 1;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // IRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}


// --------------- 登录流程 ---------------

message ServerInfoProto
{
    int32 ZoneId = 1;
    int32 State = 2;
}

//ResponseType R2C_LoginAccount
message C2R_LoginAccount // IRequest
{
    int32 RpcId = 90;
    string Account  = 1;
    string Password = 2;
}
message R2C_LoginAccount // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    repeated ServerInfoProto ServerInfoList = 1;
}

//ResponseType R2C_LoginZone
message C2R_LoginZone // IRequest
{
    int32 RpcId = 90;
    int32 ZoneId = 1;
}
message R2C_LoginZone // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    string GateAddress = 1;
    int64 GateKey = 2;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 GateKey = 1;
}
message G2C_LoginGate // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message A2C_Disconnect // IMessage
{
    int32 Error = 1;
}

message RoleInfoProto
{
    int64 UnitId = 1;
    string Name = 2;
    int32 Level = 3;
}

//ResponseType G2C_GetRoleList
message C2G_GetRoleList // IRequest
{
	int32 RpcId = 90;
	int64 GateKey = 1;
}
message G2C_GetRoleList // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    repeated RoleInfoProto RoleInfos = 1;
}

//ResponseType G2C_CreateRole
message C2G_CreateRole // IRequest
{
	int32 RpcId = 90;
	string Name = 1;
}
message G2C_CreateRole // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    RoleInfoProto RoleInfo = 1;
}

//ResponseType G2C_DeleteRole
message C2G_DeleteRole // IRequest
{
	int32 RpcId = 90;
	int64 RoleId = 1;
}
message G2C_DeleteRole // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    int64 RoleId = 1;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 90;
	int64 UnitId = 1;
}
message G2C_EnterMap // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    bool InQueue = 1;       // 是否需要排队
    int32 QueueIndex = 2;   // 排到第几位
    int32 QueueCount = 3;   // 排队总人数
}

message G2C_UpdateQueue // IMessage
{
    int32 QueueIndex = 2;   // 排到第几位
    int32 QueueCount = 3;   // 排队总人数
}

//ResponseType G2C_CancelQueue
message C2G_CancelQueue // IRequest
{
    int32 RpcId = 90;
    int64 UnitId = 1;
}
message G2C_CancelQueue // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}
